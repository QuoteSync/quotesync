# Generated by Django 5.1.6 on 2025-02-08 15:37

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nombre del autor', max_length=1024, unique=True)),
            ],
            options={
                'db_table': 'authors',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.SlugField(help_text='Título de la etiqueta', unique=True)),
                ('description', models.CharField(blank=True, help_text='Descripción de la etiqueta', max_length=1024, null=True)),
            ],
            options={
                'db_table': 'tags',
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
                'ordering': ('username',),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Título del libro', max_length=1024, unique=True)),
                ('author', models.ForeignKey(blank=True, help_text='Autor del libro', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='books', to='api.author')),
            ],
            options={
                'db_table': 'books',
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='Archivo del documento', upload_to='documents/')),
                ('title', models.CharField(blank=True, help_text='Título del documento', max_length=1024, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, help_text='Fecha de subida')),
                ('processed', models.BooleanField(default=False, help_text='Indicador de si el documento ya fue procesado')),
                ('owner', models.ForeignKey(help_text='Propietario del documento', on_delete=django.db.models.deletion.CASCADE, related_name='documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'documents',
            },
        ),
        migrations.CreateModel(
            name='ImportLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform', models.CharField(choices=[('kindle', 'Kindle'), ('google_books', 'Google Books'), ('apple_books', 'Apple Books')], help_text='Plataforma de origen', max_length=50)),
                ('file', models.FileField(help_text='Archivo importado', upload_to='imports/')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Fecha de importación')),
                ('status', models.CharField(default='pending', help_text='Estado de la importación', max_length=50)),
                ('owner', models.ForeignKey(help_text='Usuario que realizó la importación', on_delete=django.db.models.deletion.CASCADE, related_name='import_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'import_logs',
            },
        ),
        migrations.CreateModel(
            name='Quote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Título de la cita', max_length=1024)),
                ('body', models.TextField(blank=True, help_text='Contenido de la cita', null=True)),
                ('archive', models.BooleanField(default=False, help_text='Indicador de archivado')),
                ('created', models.DateField(auto_now_add=True, help_text='Fecha de creación')),
                ('updated', models.DateField(auto_now=True, help_text='Fecha de última actualización')),
                ('hash', models.SlugField(blank=True, help_text='Hash para evitar duplicados', null=True)),
                ('location', models.CharField(blank=True, help_text='Ubicación en el libro (página, posición, etc.)', max_length=256, null=True)),
                ('source_platform', models.CharField(blank=True, help_text='Plataforma de origen (Kindle, Google Books, Apple Books)', max_length=50, null=True)),
                ('book', models.ForeignKey(blank=True, help_text='Libro de origen', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='quotes', to='api.book')),
                ('owner', models.ForeignKey(help_text='Propietario de la cita', on_delete=django.db.models.deletion.CASCADE, related_name='quotes', to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, help_text='Etiquetas asociadas', related_name='quotes', to='api.tag')),
            ],
            options={
                'db_table': 'quotes',
                'ordering': ('created', 'title'),
            },
        ),
        migrations.CreateModel(
            name='QuoteGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nombre del grupo', max_length=255, unique=True)),
                ('description', models.TextField(blank=True, help_text='Descripción del grupo', null=True)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Fecha de creación del grupo')),
                ('created_by', models.ForeignKey(help_text='Creador del grupo', on_delete=django.db.models.deletion.CASCADE, related_name='created_groups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'quote_groups',
            },
        ),
        migrations.CreateModel(
            name='QuoteGroupMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('admin', 'Administrador'), ('editor', 'Editor'), ('reader', 'Lector')], help_text='Rol del usuario en el grupo', max_length=10)),
                ('joined', models.DateTimeField(auto_now_add=True, help_text='Fecha en la que el usuario se unió al grupo')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.quotegroup')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'quote_group_memberships',
                'unique_together': {('user', 'group')},
            },
        ),
        migrations.AddField(
            model_name='quotegroup',
            name='members',
            field=models.ManyToManyField(help_text='Miembros del grupo', related_name='quote_groups', through='api.QuoteGroupMembership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='QuoteList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Título de la lista', max_length=1024)),
                ('description', models.TextField(blank=True, help_text='Descripción de la lista', null=True)),
                ('visibility', models.CharField(choices=[('private', 'Privada'), ('public', 'Pública'), ('group', 'Grupo')], default='private', help_text='Nivel de visibilidad de la lista', max_length=10)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Fecha de creación de la lista')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Fecha de actualización de la lista')),
                ('group', models.ForeignKey(blank=True, help_text='Grupo asociado (si es lista de grupo)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='quote_lists', to='api.quotegroup')),
                ('owner', models.ForeignKey(help_text='Propietario de la lista', on_delete=django.db.models.deletion.CASCADE, related_name='quote_lists', to=settings.AUTH_USER_MODEL)),
                ('quotes', models.ManyToManyField(blank=True, help_text='Citas incluidas en la lista', related_name='lists', to='api.quote')),
            ],
            options={
                'db_table': 'quote_lists',
            },
        ),
        migrations.CreateModel(
            name='QuoteGroupShare',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission', models.CharField(choices=[('read', 'Solo lectura'), ('edit', 'Edición')], help_text='Permiso de acceso en el grupo', max_length=10)),
                ('shared_at', models.DateTimeField(auto_now_add=True, help_text='Fecha de compartición')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quote_shares', to='api.quotegroup')),
                ('quote', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_shares', to='api.quote')),
            ],
            options={
                'db_table': 'quote_group_shares',
                'unique_together': {('quote', 'group')},
            },
        ),
        migrations.CreateModel(
            name='QuoteListQuote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quote', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.quote')),
                ('quote_list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.quotelist')),
            ],
            options={
                'db_table': 'quote_list_quotes',
                'unique_together': {('quote_list', 'quote')},
            },
        ),
        migrations.CreateModel(
            name='QuoteTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quote', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.quote')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.tag')),
            ],
            options={
                'db_table': 'quote_tags',
                'unique_together': {('quote', 'tag')},
            },
        ),
    ]
